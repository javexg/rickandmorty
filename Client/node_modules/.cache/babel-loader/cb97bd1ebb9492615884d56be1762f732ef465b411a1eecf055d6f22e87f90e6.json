{"ast":null,"code":"import { ADD_FAVORITE, REMOVE_FAVORITE } from \"./actions-types\";\nimport { ORDER } from \"./actions-types\";\nconst initialState = {\n  myFavorites: [],\n  allCharactersFav: [] // esto es para guardar una copia de los favoritos\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  switch (type) {\n    case ADD_FAVORITE:\n      // acÃ¡ si llega ADD FAVORITE como type, retorno algo, guardo el character en myFavorites\n      return {\n        ...state,\n        myFavorites: [...state.allCharactersFav, payload],\n        allCharactersFav: [...state.allCharactersFav, payload] // en allcharacters tengo una copia\n      };\n\n    case REMOVE_FAVORITE:\n      return {\n        ...state,\n        myFavorites: state.myFavorites.filter(char => char.id !== payload)\n      };\n    // esta parte es responsable de eliminar un personaje de la lista de favoritos si su id coincide con el valor action.playload.\n\n    case FILTER:\n      const allCharactersFiltered = state.allCharactersFav.filter(\n      // filtro la copia de favs que hice\n      character => character.gender === payload);\n      return {\n        ...state,\n        myFavorites: allCharactersFiltered\n      };\n    case ORDER:\n      const allCharactersFavCopy = [...state.allCharactersFav]; // hago otra copia para ordenar ya que el filter crea un nuevo array\n      return {\n        ...state,\n        myFavorites: payload === 'A' ? allCharactersFavCopy.sort((a, b) => a.id < b.id) : allCharactersFavCopy.sort((a, b) => b.id < a.id)\n        // sort para ordenar de menor a mayor (o viceversa) segÃºn su ID \n      };\n\n    default:\n      // por default dejo todo talcual estaba\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;\n\n// Reducer se encarga de hacer los cambios en el state / store / estado global","map":{"version":3,"names":["ADD_FAVORITE","REMOVE_FAVORITE","ORDER","initialState","myFavorites","allCharactersFav","reducer","state","arguments","length","undefined","type","payload","filter","char","id","FILTER","allCharactersFiltered","character","gender","allCharactersFavCopy","sort","a","b"],"sources":["C:/Users/javie/Desktop/code/M2/ProyectoM2/rickandmorty/src/redux/reducer.js"],"sourcesContent":["import { ADD_FAVORITE, REMOVE_FAVORITE } from \"./actions-types\";\r\nimport { ORDER } from \"./actions-types\";\r\n\r\nconst initialState = {\r\n    myFavorites: [],\r\n    allCharactersFav: [] // esto es para guardar una copia de los favoritos\r\n}\r\n\r\nconst reducer = (state = initialState, {type, payload}) => {\r\n    switch(type){\r\n        case ADD_FAVORITE: // acÃ¡ si llega ADD FAVORITE como type, retorno algo, guardo el character en myFavorites\r\n            return { \r\n                ...state, \r\n                myFavorites: [...state.allCharactersFav, payload],\r\n                allCharactersFav: [...state.allCharactersFav, payload] // en allcharacters tengo una copia\r\n            };\r\n        \r\n        case REMOVE_FAVORITE:\r\n            return {...state, myFavorites: state.myFavorites.filter(\r\n                (char) => char.id !== payload )}\r\n                // esta parte es responsable de eliminar un personaje de la lista de favoritos si su id coincide con el valor action.playload.\r\n\r\n        case FILTER:\r\n            const allCharactersFiltered  = state.allCharactersFav.filter( // filtro la copia de favs que hice\r\n                character => character.gender === payload)\r\n            return{\r\n                ...state,\r\n                myFavorites: allCharactersFiltered\r\n                }\r\n\r\n        case ORDER:\r\n            const allCharactersFavCopy = [...state.allCharactersFav] // hago otra copia para ordenar ya que el filter crea un nuevo array\r\n            return{\r\n                ...state,\r\n                myFavorites:\r\n                    payload === 'A'\r\n                    ? allCharactersFavCopy.sort((a, b) => a.id < b.id) \r\n                    : allCharactersFavCopy.sort((a, b) => b.id < a.id) \r\n                    // sort para ordenar de menor a mayor (o viceversa) segÃºn su ID \r\n                }\r\n\r\n\r\n        default: // por default dejo todo talcual estaba\r\n            return { ...state}; \r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n// Reducer se encarga de hacer los cambios en el state / store / estado global"],"mappings":"AAAA,SAASA,YAAY,EAAEC,eAAe,QAAQ,iBAAiB;AAC/D,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,gBAAgB,EAAE,EAAE,CAAC;AACzB,CAAC;;AAED,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAA2C;EAAA,IAA1CC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAE;IAACQ,IAAI;IAAEC;EAAO,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClD,QAAOC,IAAI;IACP,KAAKX,YAAY;MAAE;MACf,OAAO;QACH,GAAGO,KAAK;QACRH,WAAW,EAAE,CAAC,GAAGG,KAAK,CAACF,gBAAgB,EAAEO,OAAO,CAAC;QACjDP,gBAAgB,EAAE,CAAC,GAAGE,KAAK,CAACF,gBAAgB,EAAEO,OAAO,CAAC,CAAC;MAC3D,CAAC;;IAEL,KAAKX,eAAe;MAChB,OAAO;QAAC,GAAGM,KAAK;QAAEH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACS,MAAM,CAClDC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKH,OAAO;MAAE,CAAC;IAChC;;IAER,KAAKI,MAAM;MACP,MAAMC,qBAAqB,GAAIV,KAAK,CAACF,gBAAgB,CAACQ,MAAM;MAAE;MAC1DK,SAAS,IAAIA,SAAS,CAACC,MAAM,KAAKP,OAAO,CAAC;MAC9C,OAAM;QACF,GAAGL,KAAK;QACRH,WAAW,EAAEa;MACb,CAAC;IAET,KAAKf,KAAK;MACN,MAAMkB,oBAAoB,GAAG,CAAC,GAAGb,KAAK,CAACF,gBAAgB,CAAC,EAAC;MACzD,OAAM;QACF,GAAGE,KAAK;QACRH,WAAW,EACPQ,OAAO,KAAK,GAAG,GACbQ,oBAAoB,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACP,EAAE,GAAGQ,CAAC,CAACR,EAAE,CAAC,GAChDK,oBAAoB,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACR,EAAE,GAAGO,CAAC,CAACP,EAAE;QACjD;MACJ,CAAC;;IAGT;MAAS;MACL,OAAO;QAAE,GAAGR;MAAK,CAAC;EAAC;AAE/B,CAAC;AAED,eAAeD,OAAO;;AAEtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}