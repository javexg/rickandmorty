{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javie\\\\Desktop\\\\code\\\\ProyectoRickAndMorty\\\\Client\\\\src\\\\components\\\\SearchBar\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport style from \"./SearchBar.module.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar(_ref) {\n  _s();\n  let {\n    onSearch\n  } = _ref;\n  // recibo la prop onSearch\n\n  const [id, setId] = useState(''); // inicia con string vacío ('')\n\n  const handleChange = event => {\n    setId(event.target.value); // acá indico que guarde lo que voy ingresando en el input\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.busqueda,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"search\",\n      className: style.searchInput,\n      onChange: handleChange,\n      value: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        onSearch(id);\n        setId('');\n      },\n      className: style.searchButton,\n      children: \"Agregar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this);\n}\n\n// event es un objeto con muchísimas propiedades\n// uso event.target que es otro objeto con muchas propiedades tmb\n// event.target.value muestra por ej lo que se escribe en el momento el user\n\n// value={id} como estado local debe ser igual value e id \n// value es una propiedad de input, ahí le indico que sea iguala id\n// por ende, el input que ingreso, por eso busca el id al pulsar agregar\n\n// onClick={() => {onSearch(id)}} \n// acá lo que hago es un callback, o sea que al hacer click\n// una función ejecute a la función onSearch. Si fuera  onClick={onSearch(id)} le estaría pasando id\n// entonces se ejecuta directamente porque recibe un parámetro, el callback evita eso y espera al click\n// le agrego un paso previo para que no se ejecute al leerlo de primeras\n_s(SearchBar, \"HQhLVNjveXBilLE1Zdd8jTOIPME=\");\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["style","useState","jsxDEV","_jsxDEV","SearchBar","_ref","_s","onSearch","id","setId","handleChange","event","target","value","className","busqueda","children","type","searchInput","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","searchButton","_c","$RefreshReg$"],"sources":["C:/Users/javie/Desktop/code/ProyectoRickAndMorty/Client/src/components/SearchBar/SearchBar.jsx"],"sourcesContent":["import style from \"./SearchBar.module.css\"\nimport { useState } from \"react\";\n\nexport default function SearchBar({onSearch}) { // recibo la prop onSearch\n   \n   const [id, setId] = useState(''); // inicia con string vacío ('')\n\n   const handleChange = (event) => {\n      setId(event.target.value) // acá indico que guarde lo que voy ingresando en el input\n\n   }   \n   return (\n      <div className={style.busqueda}>\n         <input type='search' className={style.searchInput} onChange={handleChange} value={id}/>\n         {/* onChange es una función que reacciona ante un cambio, cuando escribo en el input,\n         lo va guardando en value (accedo con event.target.value)*/}\n\n         <button onClick={() => {onSearch(id); setId('')}} className={style.searchButton}>Agregar</button>\n      </div>\n   );\n}\n\n// event es un objeto con muchísimas propiedades\n// uso event.target que es otro objeto con muchas propiedades tmb\n// event.target.value muestra por ej lo que se escribe en el momento el user\n\n// value={id} como estado local debe ser igual value e id \n// value es una propiedad de input, ahí le indico que sea iguala id\n// por ende, el input que ingreso, por eso busca el id al pulsar agregar\n\n\n// onClick={() => {onSearch(id)}} \n// acá lo que hago es un callback, o sea que al hacer click\n// una función ejecute a la función onSearch. Si fuera  onClick={onSearch(id)} le estaría pasando id\n// entonces se ejecuta directamente porque recibe un parámetro, el callback evita eso y espera al click\n// le agrego un paso previo para que no se ejecute al leerlo de primeras"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,wBAAwB;AAC1C,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,eAAe,SAASC,SAASA,CAAAC,IAAA,EAAa;EAAAC,EAAA;EAAA,IAAZ;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAAI;;EAE7C,MAAM,CAACG,EAAE,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElC,MAAMS,YAAY,GAAIC,KAAK,IAAK;IAC7BF,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,EAAC;EAE7B,CAAC;;EACD,oBACGV,OAAA;IAAKW,SAAS,EAAEd,KAAK,CAACe,QAAS;IAAAC,QAAA,gBAC5Bb,OAAA;MAAOc,IAAI,EAAC,QAAQ;MAACH,SAAS,EAAEd,KAAK,CAACkB,WAAY;MAACC,QAAQ,EAAET,YAAa;MAACG,KAAK,EAAEL;IAAG;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eAIvFpB,OAAA;MAAQqB,OAAO,EAAEA,CAAA,KAAM;QAACjB,QAAQ,CAACC,EAAE,CAAC;QAAEC,KAAK,CAAC,EAAE,CAAC;MAAA,CAAE;MAACK,SAAS,EAAEd,KAAK,CAACyB,YAAa;MAAAT,QAAA,EAAC;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC9F;AAEZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAAAjB,EAAA,CAhCwBF,SAAS;AAAAsB,EAAA,GAATtB,SAAS;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}