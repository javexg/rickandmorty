{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javie\\\\Desktop\\\\code\\\\M2\\\\ProyectoM2\\\\rickandmorty\\\\src\\\\components\\\\Form\\\\Form.jsx\",\n  _s = $RefreshSig$();\nimport style from './Form.module.css';\nimport { useState } from 'react';\nimport validation from '../Validation/Validation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = _ref => {\n  _s();\n  let {\n    login\n  } = _ref;\n  const [errors, setErrors] = useState({});\n  const [userData, setUserData] = useState({\n    email: '',\n    password: ''\n  });\n  const handleChange = event => {\n    setUserData({\n      ...userData,\n      // copia de lo previo\n      [event.target.name]: event.target.value // .name para llamar a email o password según corresponda\n    });\n\n    setErrors(validation({\n      ...userData,\n      [event.target.name]: event.target.value\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); // evita que se recargue la web\n    login(userData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: style.formCaja,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      placeholder: \"Email: admin@admin.com\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      value: userData.email,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        fontSize: \"11pt\"\n      },\n      children: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"password\",\n      children: \"Password: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: userData.password,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        fontSize: \"11pt\"\n      },\n      children: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(Form, \"ujTtzs3pHQspxHoP93R7F8BwugE=\");\n_c = Form;\nexport default Form;\n\n// onChange queda atento a los cambios que hace el usuario en los inputs (email/contraseña) y le avisa a handleChange\n// en handleChange tengo el State donde voy a hacer cambio del estado para que coindida con lo que ingresa el usuario\n\n// los estados NO se importan, se pueden pasar como parámetro \nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["style","useState","validation","jsxDEV","_jsxDEV","Form","_ref","_s","login","errors","setErrors","userData","setUserData","email","password","handleChange","event","target","name","value","handleSubmit","preventDefault","onSubmit","className","formCaja","children","htmlFor","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","color","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/javie/Desktop/code/M2/ProyectoM2/rickandmorty/src/components/Form/Form.jsx"],"sourcesContent":["import style from './Form.module.css'\r\nimport { useState } from 'react';\r\n\r\nimport validation from '../Validation/Validation';\r\n\r\nconst Form = ({login}) => {\r\n\r\n    const [errors, setErrors] = useState ({})\r\n\r\n    const [userData, setUserData] = useState({\r\n        email:'', \r\n        password:''\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        setUserData({\r\n            ...userData, // copia de lo previo\r\n            [event.target.name]: event.target.value // .name para llamar a email o password según corresponda\r\n        })\r\n\r\n        setErrors(validation({\r\n            ...userData,\r\n            [event.target.name]: event.target.value\r\n        }))\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault(); // evita que se recargue la web\r\n        login(userData);\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <form onSubmit={handleSubmit} className={style.formCaja} >\r\n            <label htmlFor=\"email\" placeholder='Email: admin@admin.com'></label>\r\n            <input type=\"text\" name='email' value={userData.email} onChange={handleChange}/>\r\n            {errors.email && <p style={{color:\"red\", fontSize:\"11pt\"}}>{errors.email}</p>}\r\n            <label htmlFor=\"password\">Password: </label>\r\n            <input type=\"password\" name='password' value={userData.password} onChange={handleChange}/>\r\n            {errors.password && <p style={{color:\"red\", fontSize:\"11pt\"}}>{errors.password}</p>}\r\n\r\n\r\n            <button>Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form; \r\n\r\n\r\n// onChange queda atento a los cambios que hace el usuario en los inputs (email/contraseña) y le avisa a handleChange\r\n// en handleChange tengo el State donde voy a hacer cambio del estado para que coindida con lo que ingresa el usuario\r\n\r\n// los estados NO se importan, se pueden pasar como parámetro "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}